name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pip install pytest
        pytest --tb=short

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set up Azure CLI
      run: |
        az extension add --name containerapp
    
    - name: Deploy to Azure Container Apps
      run: |
        # Set variables
        RESOURCE_GROUP="tolis-working-rg"
        CONTAINER_APP_ENV="tolis-aca-env"
        CONTAINER_APP_NAME="tbsg-ai-rfp-assistant"
        IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        
        # Get the container app environment
        echo "Getting container app environment..."
        az containerapp env show --name $CONTAINER_APP_ENV --resource-group $RESOURCE_GROUP
        
        # Check if container app exists
        if az containerapp show --name $CONTAINER_APP_NAME --resource-group $RESOURCE_GROUP >/dev/null 2>&1; then
          echo "Updating existing container app..."
          az containerapp update \
            --name $CONTAINER_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --image $IMAGE_NAME \
            --set-env-vars DEMO_MODE=false PORT=5000
        else
          echo "Creating new container app..."
          az containerapp create \
            --name $CONTAINER_APP_NAME \
            --resource-group $CONTAINER_APP_ENV \
            --environment $CONTAINER_APP_ENV \
            --image $IMAGE_NAME \
            --target-port 5000 \
            --ingress external \
            --min-replicas 1 \
            --max-replicas 3 \
            --cpu 0.5 \
            --memory 1.0Gi \
            --env-vars DEMO_MODE=false PORT=5000 \
            --secrets temenos-jwt-token="${{ secrets.TEMENOS_JWT_TOKEN }}" \
            --secret-env-vars TEMENOS_JWT_TOKEN=temenos-jwt-token
        fi
        
        # Get the URL
        echo "Getting container app URL..."
        URL=$(az containerapp show --name $CONTAINER_APP_NAME --resource-group $RESOURCE_GROUP --query properties.configuration.ingress.fqdn -o tsv)
        echo "Application deployed at: https://$URL"